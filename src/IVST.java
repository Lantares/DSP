/***********************************
	程序说明：V系统反变换

	最后修改时间：2005-09-16
	
	作者：梁延研
***********************************/

import java.awt.*;

public class IVST {

	//IVST变换点数
	int count;
	
	//循环变量
	int  i,j,k;
	
	//中间变量
	int bfsize,p;	
	int r,n;
	double temp;
	double[] temp1,x1,x2,x3,td;
	
	//初始化4*4矩阵
	//3次Legendre，斜变换
	
	double u[] = { 0.50000000000000000000000000000000,  0.50000000000000000000000000000000,  0.50000000000000000000000000000000,  0.50000000000000000000000000000000,
				   0.67082039324993690892275210061939,  0.22360679774997896964091736687313, -0.22360679774997896964091736687313, -0.67082039324993690892275210061939,
				   0.50000000000000000000000000000000, -0.50000000000000000000000000000000, -0.50000000000000000000000000000000,  0.50000000000000000000000000000000,
				   0.22360679774997896964091736687313, -0.67082039324993690892275210061939,  0.67082039324993690892275210061939, -0.22360679774997896964091736687313 };
 	
 	//DCT
 	/*
	double u[] = { 0.50000000000000000000000000000000,  0.50000000000000000000000000000000,  0.50000000000000000000000000000000,  0.50000000000000000000000000000000,
				   0.65328148243818817686445754588931,  0.27059805007309856161867855917080, -0.27059805007309856161867855917080, -0.65328148243818817686445754588931,
				   0.50000000000000000000000000000000, -0.50000000000000000000000000000000, -0.50000000000000000000000000000000,  0.50000000000000000000000000000000,
				   0.27059805007309856161867855917080, -0.65328148243818817686445754588931,  0.65328148243818817686445754588931, -0.27059805007309856161867855917080 };
 	*/
	//初始化8*8矩阵
	//1次U系统
	/*
	double u[] = { 0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
				   0.54006172486732168591383061967400,     0.38575837490522977565273615691000,     0.23145502494313786539164169414600,  0.77151674981045955130547231382001e-1, -0.77151674981045955130547231382001e-1,    -0.23145502494313786539164169414600,    -0.38575837490522977565273615691000,    -0.54006172486732168591383061967400,
			       0.47434164902525689979983403166490,     0.15811388300841896659994467722164,    -0.15811388300841896659994467722164,    -0.47434164902525689979983403166490,    -0.47434164902525689979983403166490,    -0.15811388300841896659994467722164,     0.15811388300841896659994467722164,     0.47434164902525689979983403166490,
			       0.24152294576982397622864440261950, -0.34503277967117710889806343231357e-1,    -0.31052950170405939800825708908221,    -0.58655572544100108512670783493306,     0.58655572544100108512670783493306,     0.31052950170405939800825708908221,  0.34503277967117710889806343231357e-1,    -0.24152294576982397622864440261950,
			       0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
			       0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,
			       0.15811388300841896659994467722164,    -0.47434164902525689979983403166490,     0.47434164902525689979983403166490,    -0.15811388300841896659994467722164,    -0.15811388300841896659994467722164,     0.47434164902525689979983403166490,    -0.47434164902525689979983403166490,     0.15811388300841896659994467722164,
			       0.15811388300841896659994467722164,    -0.47434164902525689979983403166490,     0.47434164902525689979983403166490,    -0.15811388300841896659994467722164,     0.15811388300841896659994467722164,    -0.47434164902525689979983403166490,     0.47434164902525689979983403166490,    -0.15811388300841896659994467722164 };
 	*/
	//3次U系统
	/*
	double u[] = { 0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
				   0.54006172486732168591383061967400,     0.38575837490522977565273615691000,     0.23145502494313786539164169414600,  0.77151674981045955130547231382001e-1, -0.77151674981045955130547231382001e-1,    -0.23145502494313786539164169414600,    -0.38575837490522977565273615691000,    -0.54006172486732168591383061967400,
				   0.54006172486732168591383061967400,  0.77151674981045955130547231382001e-1,    -0.23145502494313786539164169414600,    -0.38575837490522977565273615691000,    -0.38575837490522977565273615691000,    -0.23145502494313786539164169414600,  0.77151674981045955130547231382001e-1,     0.54006172486732168591383061967400,
				   0.43082021842766456456984231043835,    -0.30772872744833183183560165031311,    -0.43082021842766456456984231043835,    -0.18463723646899887764760705977096,     0.18463723646899876662530459725531,     0.43082021842766456456984231043835,     0.30772872744833229541328023515234,    -0.43082021842766456456984231043835,
				   0.27548791101057291083061087867754,    -0.49450935578916505042101903200091,    -0.16939939869594258792240282218700,     0.38842084347453448289755328914907,     0.38842084347453453840870452040690,    -0.16939939869594236587779789715569,    -0.49450935578916493939871656948526,     0.27548791101057291083061087867754,
				   0.13910030319483226990406876666384,    -0.43938032279002647850774110338534,     0.24949736922247769954630314259703,     0.47470738391887329354901225997310,    -0.47470738391887318252670979745744,    -0.24949736922247769954630314259703,     0.43938032279002653401889233464317,    -0.13910030319483257292541326411114,
			    0.86253951911573506494690377621737e-1,    -0.35285707600189064856404165233990,     0.54104751653623232779819720025452,    -0.27444439244591494888314350737548,    -0.27444439244591494888314350737548,     0.54104751653623232779819720025452,    -0.35285707600189064856404165233990,  0.86253951911573269648987959460866e-1,
			    0.58123819371909640349523469831417e-1,    -0.25186988394494177484793503593614,     0.44561594851797390934634660204086,    -0.48436516143258033624602891526180,     0.48436516143258033624602891526180,    -0.44561594851797390934634660204086,     0.25186988394494177484793503593614, -0.58123819371909640349523469831417e-1 };
	*/
	//7次Legendre
	/*
	double u[] = { 0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
			       0.54006172486732168591383061967400,     0.38575837490522977565273615691000,     0.23145502494313786539164169414600,  0.77151674981045955130547231382001e-1, -0.77151674981045955130547231382001e-1,    -0.23145502494313786539164169414600,    -0.38575837490522977565273615691000,    -0.54006172486732168591383061967400,
			       0.54006172486732168591383061967400,  0.77151674981045955130547231382001e-1,    -0.23145502494313786539164169414600,    -0.38575837490522977565273615691000,    -0.38575837490522977565273615691000,    -0.23145502494313786539164169414600,  0.77151674981045955130547231382001e-1,     0.54006172486732168591383061967400,
			       0.43082021842766456456984231043835,    -0.30772872744833183183560165031311,    -0.43082021842766456456984231043835,    -0.18463723646899909910136099018787,     0.18463723646899909910136099018787,     0.43082021842766456456984231043835,     0.30772872744833183183560165031311,    -0.43082021842766456456984231043835,
			       0.28203803740888310445757368080566,    -0.52378492661649719399263683578194,    -0.12087344460380704476753157748814,     0.36262033381142113430259473246442,     0.36262033381142113430259473246442,    -0.12087344460380704476753157748814,    -0.52378492661649719399263683578194,     0.28203803740888310445757368080566,
			       0.14978617237881952064951519093087,    -0.49215456638754985356269277020143,     0.36376641863427597872025117797498,     0.32097036938318468710610398056616,    -0.32097036938318468710610398056616,    -0.36376641863427597872025117797498,     0.49215456638754985356269277020143,    -0.14978617237881952064951519093087,
				0.61545745489666366367120330062621e-1,    -0.30772872744833183183560165031311,     0.55391170940699729730408297056359,    -0.30772872744833183183560165031311,    -0.30772872744833183183560165031311,     0.55391170940699729730408297056359,    -0.30772872744833183183560165031311,  0.61545745489666366367120330062621e-1,
			    0.17069718549972939802827909261396e-1,    -0.11948802984981080266667964264606,     0.35846408954943240800003892793816,    -0.59744014924905401333339821323027,     0.59744014924905401333339821323027,    -0.35846408954943240800003892793816,     0.11948802984981038433076605542738, -0.17069718549972939802827909261396e-1 };
	*/
	//离散余弦变换核
	/*
	double u[] = { 0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
			       0.49039264020161527080077235041244,     0.41573480615127261783570133957255,     0.27778511650980119984666316668154,  0.97545161008064124041894160654920e-1, -0.97545161008064124041894160654920e-1,    -0.27778511650980119984666316668154,    -0.41573480615127261783570133957255,    -0.49039264020161527080077235041244,
			       0.46193976625564336924156805253006,     0.19134171618254491864519195587491,    -0.19134171618254491864519195587491,    -0.46193976625564336924156805253006,    -0.46193976625564336924156805253006,    -0.19134171618254491864519195587491,     0.19134171618254491864519195587491,     0.46193976625564336924156805253006,
			       0.41573480615127256232455010831472, -0.97545161008064124041894160654920e-1,    -0.49039264020161521528962111915462,    -0.27778511650980108882436070416588,     0.27778511650980108882436070416588,     0.49039264020161521528962111915462,  0.97545161008064124041894160654920e-1,    -0.41573480615127256232455010831472,
			       0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,     0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,    -0.35355339059327376220042218105242,     0.35355339059327376220042218105242,
			       0.27778511650980108882436070416588,    -0.49039264020161521528962111915462,  0.97545161008064124041894160654920e-1,     0.41573480615127256232455010831472,    -0.41573480615127256232455010831472, -0.97545161008064124041894160654920e-1,     0.49039264020161521528962111915462,    -0.27778511650980108882436070416588,
			       0.19134171618254491864519195587491,    -0.46193976625564336924156805253006,     0.46193976625564336924156805253006,    -0.19134171618254491864519195587491,    -0.19134171618254491864519195587491,     0.46193976625564336924156805253006,    -0.46193976625564336924156805253006,     0.19134171618254491864519195587491,
				0.97545161008064151797469776283833e-1,    -0.27778511650980114433551193542371,     0.41573480615127267334685257083038,    -0.49039264020161521528962111915462,     0.49039264020161521528962111915462,    -0.41573480615127267334685257083038,     0.27778511650980114433551193542371, -0.97545161008064151797469776283833e-1 };
 	*/
	
	int size = 4;	
	IWHT tempIWHT;
		
	public void setData(double[] fd,int r) {
	
		this.r = r;
		
		//计算IVST变换的点数
		count = 1<<r;		
		n = count/size;
		x1 = new double[count];
		x2 = new double[n];
		x3 = new double[size];
		td = new double[count];
					
		//将频域点写入x1
		for(i = 0; i < size; i++)
		{
			for(j = 0; j < n; j++)
			{
				//x1[i*n+j] = fd[j*size+i];
				x1[j*size+i] = fd[j*size+i];
			}				
		}	
		
	}
	
	public double[] getData() {
			
		int l = 1;
		int lp = 0;
		while(l*2 <= n)
		{
			l *= 2;
			lp++;
		}		
		
		r = lp;
		for(k = 0; k < size; k++)
		{
			//蝶形运算
			for(int a = 0; a < r; a++)
			{

				bfsize = 1<<(r-a);
				temp1 = new double[bfsize/2];
				for(i = 0; i < bfsize/2; i++)
				{		
					temp1[i] = x1[i+bfsize/2+k*n];
				}
				int s = r-a-1;
				tempIWHT = new IWHT();
				tempIWHT.setData(temp1,s);
				temp1 = tempIWHT.getData();
				for(i = 0; i < bfsize/2; i++)
				{			
					x1[i+bfsize/2+k*n] = temp1[i]*Math.sqrt(bfsize/2);
				}

			}
		}	
					
		for(k = 0; k < size; k++)
		{			
			for(i = 0; i < n; i++)
			{
				x2[i] = x1[k*n+i];
			}
			
			tempIWHT = new IWHT();
			tempIWHT.setData(x2,lp);
			x2 = tempIWHT.getData();
			
			for(i = 0; i < n; i++)
			{
				td[k*n+i] = x2[i];
			}
		}
		
		for(k = 0; k < n; k++)
		{
			for(i = 0; i < size; i++)
			{
				x3[i] = td[i*n+k];
			}
			
			for(i = 0; i < size; i++)
			{
				temp = 0;
				for(j = 0; j < size; j++)
				{
					temp = temp + u[j*size+i]*x3[j];
				}
				x1[k*size+i] = temp;
			}						
		}
						
		for(k = 0; k < n; k++)
		{
			for(i = 0; i < size; i++)
			{
				td[k*size+i] = x1[k*size+i]/Math.sqrt(size);
			}
			
		}
		
		return td;
		
	}

	//测试
	/*
	public static void main(String[] args) {
		
		double[] fd;
		double[] td;
		int i;
		int k = 32;
		fd = new double[k];
		td = new double[k];
		
		IVST tempIVST = new IVST();
		
		fd[0] = 528;
		fd[1] = -35.77708763999664;
		fd[4] = -256;
		fd[8] = -90.50966799187809;
		fd[12] = -90.50966799187809;
		fd[16] = -32;
		fd[20] = -32;
		fd[24] = -32;
		fd[28] = -32;
		
		for(i = 0; i < k; i++)
		{
			if (0 == Math.IEEEremainder(i,k))
				System.out.print("\n");
			System.out.print(fd[i]+" ");
		}
		
		tempIVST.setData(fd,5);
		td = tempIVST.getData();
		
		for(i = 0; i < k; i++)
		{
			if (0 == Math.IEEEremainder(i,k))
				System.out.print("\n");
			System.out.print(td[i]+" ");
		}	
	}
	*/
}